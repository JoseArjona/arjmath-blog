---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import "@fontsource/dm-serif-display";
import "@fontsource/dm-sans/400.css";
import "@fontsource/dm-sans/600.css";
import GitCard from "../components/GitCard.astro";
import SubLink from "../components/SubLink.astro";
import { ViewTransitions } from "astro:transitions";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage, heroImageAlt } =
  Astro.props;
---

<html lang="es">
  <head>
    <ViewTransitions />
    <BaseHead title={title} description={description} />
    <style>
      body {
        background: #11131a;
      }
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }

      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: #e4dfdf;
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }
      .prose h1,
      .prose h2,
      .prose h3,
      .prose h4,
      .prose h5,
      .prose h6 {
        color: #e4dfdf !important;
      }

      .gitcard {
        display: flex;
        justify-content: center;
        align-items: center;
      }
    </style>
  </head>

  <body>
    <Header />
    <main class="blog-main">
      <article>
        <header class="hero-image">
          {
            heroImage && (
              <img
                width={1020}
                height={510}
                src={heroImage}
                alt={heroImageAlt}
              />
            )
          }
        </header>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            <h1>{title}</h1>
            <hr />
          </div>
          <slot />
        </div>
      </article>
      <footer class="gitcard"><GitCard /></footer>
    </main>
    <nav class="footer-nav">
      <SubLink href="/blog">Ver m√°s art√≠culos</SubLink>
    </nav>

    <Footer />
    <style>
      .footer-nav {
        display: flex;
        align-items: center;
        justify-content: center;
      }
    </style>
    <script is:inline>
      function enableCopy(
        selector = "pre",
        childSelector = "code",
        btnText = "üìã",
        btnTextSuccess = "Copied‚úÖ",
        activeClass = "copy"
      ) {
        document
          .querySelectorAll(`${selector}:not(.${activeClass})`)
          .forEach((node) => {
            // create a "copy" button
            let copyBtn = document.createElement("button");
            copyBtn.innerText = btnText;
            // activeClass acts as flag so we don't add another copy button by  mistake
            copyBtn.classList.add(activeClass);
            node.appendChild(copyBtn);
            copyBtn.addEventListener("click", async () => {
              // get the code to copy
              let code = node.querySelector(childSelector).innerText;
              // copy to clipboard
              await navigator.clipboard.writeText(code);
              // change button text
              copyBtn.innerText = btnTextSuccess;
              // reset button text after 1 second
              setTimeout(() => {
                copyBtn.innerText = btnText;
              }, 1000);
            });
          });
      }
      enableCopy();
    </script>
  </body>
</html>
